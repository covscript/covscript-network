# Generated by Extended CovScript Compiler
# DO NOT MODIFY
# Date: Fri Sep 26 14:40:32 2025
import ecs as netutils_ecs
struct __netutils_ecs_lambda_impl_1__
	function construct()
	end
	function call(session, post_data)
		link self = this.call
		var response_data = "<html><head><meta charset=\"UTF-8\"></head><body><p>404 Not Found: " + session.url + "</p></body></html>"
		session.send_response(state_codes.code_404, response_data, "text/html")
	end
end
struct __netutils_ecs_lambda_impl_2__
	var response_data = null
	var state_code = null
	function construct(_response_data, _state_code)
		this.response_data := _response_data
		this.state_code := _state_code
	end
	function call(session, post_data)
		link self = this.call
		session.send_response(state_code, response_data, "text/html")
	end
end
package netutils
import network; using network
import regex
import curl
var request_line_reg = regex.build("^([^ ]*) ([^? ]*)(\\?([^ ]*))? HTTP/([^ ]*)$")
var request_header_reg = regex.build("^([^:]*): ?(.*)$")
namespace state_codes
	constant code_200 = "200 OK"
	constant code_400 = "400 Bad Request"
	constant code_403 = "403 Forbidden"
	constant code_404 = "404 Not Found"
	constant code_500 = "500 Internal Server Error"
	constant code_503 = "503 Service Unavailable"
end
var wday_map = {"Mon", "Tues", "Wed", "Thur", "Fri", "Sat", "Sun"}
var mon_map = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"}
function time_padding(obj, width)
	var time = to_string(obj)
	var last = width - time.size
	if last <= 0
		return time
	end
	var str = new string
	foreach it in range(last) do str.append("0")
	return str + time
end
function compose_http_time()
	var tm = runtime.utc_time()
	return "Date: " + wday_map[tm.wday - 1] + ", " + tm.mday + " " + mon_map[tm.mon] + " " + to_string(1900 + tm.year) + " " + time_padding(tm.hour, 2) + ":" + time_padding(tm.min, 2) + ":" + time_padding(tm.sec, 2) + " GMT"
end
class http_session
	var url = null
	var args = null
	var sock = null
	var host = null
	var method = null
	var version = null
	var connection = null
	var content_length = null
	function construct(socket, request_header)
		sock = socket
		var request_line = request_header.front
		request_header.pop_front()
		var match = request_line_reg.match(request_line)
		if !match.empty()
			method = match.str(1)
			url = match.str(2)
			args = match.str(4)
			version = match.str(5)
		end
		foreach line in request_header
			var match = request_header_reg.match(line)
			if !match.empty()
				switch match.str(1)
					case "Host"
						host = match.str(2)
					end
					case "Connection"
						connection = match.str(2)
					end
					case "Content-Length"
						content_length = match.str(2).to_number()
					end
				end
			end
		end
	end
	function send_response(code, data, type)
		sock.send("HTTP/" + version + " " + code + "\r\n")
		sock.send(compose_http_time() + "\r\n")
		sock.send("Connection: " + connection)
		sock.send("Content-Length: " + data.size + "\r\n")
		sock.send("Content-Type: " + type + "\r\n")
		sock.send("\r\n")
		sock.send(data)
	end
end
var log_stream = null
function log(msg)
	if log_stream != null
		log_stream.println("[" + compose_http_time() + "]: " + msg)
	end
end
struct worker_type
	var co = null
	var server = null
end
function wait_sock(sock, size)
	while sock.available() < size
		fiber.yield()
	end
end
function fiber_main(self)
	constant buffer_size = 256
	loop
		while self->server->ac_lock
			fiber.yield()
		end
		self->server->ac_lock = true
		var sock = new tcp.socket
		runtime.await(sock.accept, self->server->ac)
		self->server->ac_lock = false
		var header = new array
		var buffer = new string
		loop
			wait_sock(sock, 1)
			var str = sock.receive(buffer_size)
			var skip_cntl_n = false
			var end_of_header = 0
			foreach ch in str
				if end_of_header == 2
					buffer.append(ch)
					continue
				end
				if skip_cntl_n
					skip_cntl_n = false
					if ch == '\n'
						header.push_back(buffer)
						buffer = new string
						++end_of_header
						continue
					end
				end
				if ch == '\r'
					skip_cntl_n = true
					continue
				end
				end_of_header = 0
				buffer.append(ch)
			end
		until end_of_header == 2
		var session = netutils_ecs.param_new(http_session, {sock, header})
		var data = null
		if session.method == "POST"
			data = buffer
			if session.content_length > buffer.size
				var last_length = session.content_length - buffer.size
				while last_length > buffer_size
					wait_sock(sock, buffer_size)
					data.append(sock.receive(buffer_size))
					last_length -= buffer_size
				end
				wait_sock(sock, last_length)
				data.append(sock.receive(last_length))
			end
		else
			data = session.args
		end
		link url_map = self->server->url_map
		if url_map.exist(session.url)
			url_map[session.url](session, data)
		else
			url_map["404"](session, data)
		end
		sock.close()
	end
end
function asio_main(self)
	loop
		var sock = new tcp.socket
		var state = async.accept(sock, self->server->ac)
		loop
			async.poll_once()
			if state.has_done()
				break
			else
				fiber.yield()
			end
		end
		if state.get_error() != null
			system.out.println("Error: " + state.get_error())
			continue
		end
		var header = new array
		var error = false
		state = new async.state
		loop
			async.read_until(sock, state, "\r\n")
			loop
				async.poll_once()
				if state.has_done()
					break
				else
					fiber.yield()
				end
			end
			if state.get_error() != null
				system.out.println("Error: " + state.get_error())
				error = true
				break
			end
			var line = state.get_result()
			line = line.substr(0, line.size - 2)
			if line.empty()
				break
			end
			header.push_back(move(line))
		end
		if error
			continue
		end
		var session = netutils_ecs.param_new(http_session, {sock, header})
		var data = null
		if session.method == "POST"
			data = state.get_buffer()
			var last_length = session.content_length - data.size
			if last_length > 0
				state = async.read(sock, last_length)
				loop
					async.poll_once()
					if state.has_done()
						break
					else
						fiber.yield()
					end
				end
				data.append(state.get_result())
			end
		else
			data = session.args
		end
		link url_map = self->server->url_map
		if url_map.exist(session.url)
			url_map[session.url](session, data)
		else
			url_map["404"](session, data)
		end
		sock.close()
	end
end
var worker_map = netutils_ecs.type_constructor.__hash_map({"fiber" : fiber_main, "asio" : asio_main})
function read_file(path)
	var ifs = iostream.ifstream(path)
	var data = new string
	loop
		var ch = ifs.get()
		if ifs.good() && !ifs.eof()
			data.append(ch)
		else
			break
		end
	end
	return move(data)
end
var proxy = null, timeout_ms = null, low_speed_limit = null
function http_get(url)
	var buff = new iostream.char_buff
	var session = curl.make_session_os(buff.get_ostream())
	session.set_url(url)
	session.allow_redirect(true)
	if proxy != null
		session.set_proxy(proxy)
	end
	session.set_ssl_verify_host(false)
	session.set_ssl_verify_peer(false)
	if timeout_ms != null
		session.set_connect_timeout_ms(timeout_ms)
		session.set_accept_timeout_ms(timeout_ms)
		session.set_low_speed_time(timeout_ms)
	end
	if low_speed_limit != null
		session.set_low_speed_limit(low_speed_limit)
	end
	if session.perform()
		return buff.get_string()
	else
		return null
	end
end
function http_post(url, post_fields)
	var buff = new iostream.char_buff
	var session = curl.make_session_os(buff.get_ostream())
	session.set_url(url)
	session.allow_redirect(true)
	if proxy != null
		session.set_proxy(proxy)
	end
	session.set_http_post(true)
	session.set_http_post_fields(post_fields)
	session.set_ssl_verify_host(false)
	session.set_ssl_verify_peer(false)
	if timeout_ms != null
		session.set_connect_timeout_ms(timeout_ms)
		session.set_accept_timeout_ms(timeout_ms)
		session.set_low_speed_time(timeout_ms)
	end
	if low_speed_limit != null
		session.set_low_speed_limit(low_speed_limit)
	end
	if session.perform()
		return buff.get_string()
	else
		return null
	end
end
class http_server
	var ac = null
	var ac_lock = false
	var async_guard = null
	var worker_impl = "asio"
	var url_map = new hash_map
	var worker_list = new array
	var worker_count = 10
	function initialize()
		url_map.insert("404", netutils_ecs.init_lambda(global.__netutils_ecs_lambda_impl_1__))
	end
	function bind_page(url, path, state_code)
		var response_data = read_file(path)
		url_map.insert(url, netutils_ecs.init_lambda(global.__netutils_ecs_lambda_impl_2__, response_data, state_code))
	end
	function bind_func(url, func)
		netutils_ecs.check_type_s("func", func, netutils_ecs.type_validator.__function)
		url_map.insert(url, func)
	end
	function listen(port)
		netutils_ecs.check_type_s("port", port, netutils_ecs.type_validator.__integer)
		ac = tcp.acceptor(tcp.endpoint_v4(port))
	end
	function run()
		if worker_impl == "asio"
			async_guard = new async.work_guard
		end
		foreach it in range(worker_count)
			var worker = gcnew worker_type
			worker->server = &this
			worker->co = fiber.create(worker_map[worker_impl], worker)
			worker->co.resume()
			worker_list.push_back(worker)
		end
		loop
			foreach worker in worker_list
				worker->co.resume()
			end
		end
	end
end
