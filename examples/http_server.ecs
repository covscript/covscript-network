import netutils
import argparse
import codec.json
import csdbc
import csdbc_sqlite

var parser = new argparse.ArgumentParser
parser.program_name = "ecs http_server.ecs"
parser.description = "HTTP Server based on NetUtils"
parser.add_argument("config", true, "Configure JSON file")
parser.add_option("--dir", false, false, "Work directory").set_defaults("--dir", ".")
parser.add_option("--log", false, false, "Log file").set_defaults("--log", null)
parser.add_option("--role", false, false, "Work role, expected simple, master or slave_N").set_defaults("--role", "simple")

var args = null
try
    args = parser.parse_args(context.cmd_args)
catch e
    system.out.println(e.what)
    parser.print_help()
    system.exit(0)
end

if args.dir == "."
    args.dir = runtime.get_current_dir()
end

var config = json.to_var(json.from_stream(iostream.ifstream(args.config)))

if args.log != null
    netutils.log_stream = iostream.ofstream(args.log)
    if netutils.log_stream.good()
        netutils.log("Log started for role: " + args.role)
    else
        netutils.log_stream = null
    end
end

var db = csdbc_sqlite.open(config.database)

if !(db.table_list() as hash_set).exist("NETUTILS_TEST")
    db.just_exec("CREATE TABLE NETUTILS_TEST (ID " + db.typenames_full[csdbc.sql_text] + " PRIMARY KEY, VAL " + db.typenames_full[csdbc.sql_text] + ")")
end

var get_stmt = db.prepare("SELECT * FROM NETUTILS_TEST WHERE ID=?")
var set_stmt = db.prepare("REPLACE INTO NETUTILS_TEST (ID, VAL) VALUES (?, ?)")

function hex_char_to_int(c)
    if c >= "0" && c <= "9"
        return to_integer(c[0]) - to_integer('0')
    end
    if c >= "a" && c <= "f"
        return to_integer(c[0]) - to_integer('a') + 10
    end
    if c >= "A" && c <= "F"
        return to_integer(c[0]) - to_integer('A') + 10
    end
    return -1
end

function hex_to_int(s)
    var val = 0
    foreach i in range(s.size)
        var d = hex_char_to_int(s.substr(i, 1))
        if d < 0
            return 0
        end
        val = val * 16 + d
    end
    return val
end

function url_decode(s)
    var out = ""
    var i = 0
    var n = s.size
    while i < n
        var ch = s.substr(i, 1)
        if ch == "+"
            out += " "
            i += 1
        else if ch == "%" && i + 2 < n
            var hx = s.substr(i + 1, 2)
            var byte = hex_to_int(hx)
            out += char.from_ascii(byte)
            i += 3
        else
            out += ch
            i += 1
        end
    end
    return out
end

function parse_get_args(input)
    var qs = input
    var qpos = input.find("?", 0)
    if qpos != -1
        qs = input.substr(qpos + 1, input.size)
    end

    var result = new hash_map
    if qs == "" || qs == null
        return result
    end

    var parts = qs.split({'&'})
    foreach p in parts
        if p == ""
            continue
        end
        var eq = p.find("=", 0)
        var key = ""
        var val = ""
        if eq == -1
            key = url_decode(p)
            val = ""
        else
            key = url_decode(p.substr(0, eq))
            val = url_decode(p.substr(eq + 1, p.size))
        end

        if !result.exist(key)
            result[key] = val
        else
            var cur = result[key]
            if typeid cur != typeid array
                var v = new array
                v.push_back(cur)
                v.push_back(val)
                result[key] = v
            else
                cur.push_back(val)
                result[key] = cur
            end
        end
    end
    return result
end

function fiber_delay(period)
    var time = runtime.time()
    while runtime.time() - time < period
        fiber.yield()
    end
end

var server = (new netutils.http_server)
    .set_config(config)
    .bind_code(netutils.state_codes.code_404, "404.html")
    .bind_func("/get", [](server, session, data){
        # DB query
        if session.method != "POST"
            var args = parse_get_args(data)
            get_stmt.bind(0, args.id)
        else
            session.send_response(netutils.state_codes.code_403, "Please use GET method.", "text/plain")
        end
        var result = get_stmt.exec()
        if result.size != 1
            session.send_response(netutils.state_codes.code_403, "Record not existed.", "text/plain")
        else
            session.send_response(netutils.state_codes.code_200, result[0][1].data, "text/plain")
        end
    })
    .bind_func("/set", [](server, session, data){
        # DB insert
        if session.method != "POST"
            var args = parse_get_args(data)
            set_stmt.bind(0, args.id)
            set_stmt.bind(1, args.val)
        else
            session.send_response(netutils.state_codes.code_403, "Please use GET method.", "text/plain")
        end
        var result = set_stmt.just_exec()
        session.send_response(netutils.state_codes.code_200, "OK", "text/plain")
    })
    .bind_func("/block", [](server, session, data){
        # Test for block API
        fiber_delay(50)
        session.send_response(netutils.state_codes.code_200, "OK", "text/plain")
    })
    .bind_func("/test", [](server, session, data){
        # Simple ECHO Server
        if session.method != "POST"
            session.send_response(netutils.state_codes.code_400, "Please use POST method. Data = " + data, "text/plain")
        else
            session.send_response(netutils.state_codes.code_200, data, "text/plain")
        end
    })

# multi-node setup
switch args.role
    case "simple"
        server.listen(config.port)
        system.out.println("Starting Simple HTTP server at http://" + netutils.local_addr() + ":" + config.port + "/")
    end
    case "master"
        server.set_master(config.master_port as integer).listen(config.port)
        system.out.println("Starting Distributed HTTP server at http://" + netutils.local_addr() + ":" + config.port + "/")
    end
    default
        server.set_slave(config.master_addr, config.master_port as integer)
    end
end

server.run()
